public class ThreadExample {

    // Thread to print "BMS College of Engineering" every 10 seconds
    static class PrintBMS implements Runnable {
        private volatile boolean running = true; // Volatile flag to control thread execution
        
        public void run() {
            while (running) {
                System.out.println("BMS College of Engineering");
                try {
                    Thread.sleep(10000); // Sleep for 10 seconds
                } catch (InterruptedException e) {
                    System.out.println("Thread interrupted: " + e.getMessage());
                }
            }
        }
        
        // Method to stop the thread
        public void stopThread() {
            running = false;
        }
    }

    // Thread to print "CSE" every 2 seconds
    static class PrintCSE implements Runnable {
        private volatile boolean running = true; // Volatile flag to control thread execution
        
        public void run() {
            while (running) {
                System.out.println("CSE");
                try {
                    Thread.sleep(2000); // Sleep for 2 seconds
                } catch (InterruptedException e) {
                    System.out.println("Thread interrupted: " + e.getMessage());
                }
            }
        }
        
        // Method to stop the thread
        public void stopThread() {
            running = false;
        }
    }

    public static void main(String[] args) {
        // Creating thread objects
        PrintBMS printBMS = new PrintBMS();
        PrintCSE printCSE = new PrintCSE();

        Thread thread1 = new Thread(printBMS);
        Thread thread2 = new Thread(printCSE);

        // Starting the threads
        thread1.start();
        thread2.start();

        // Let the threads run for some time (e.g., 30 seconds)
        try {
            Thread.sleep(30000); // Let it run for 30 seconds before stopping
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Gracefully stop the threads
        printBMS.stopThread();
        printCSE.stopThread();
        
        // Optionally, join threads to wait for their completion (not necessary for infinite loops)
        try {
            thread1.join();
            thread2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Program finished.");
    }
}
